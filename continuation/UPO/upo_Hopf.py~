"""
Continuation of the Hopf fixed points and periodic orbit
"""
import numpy as np

def fieldCart(x, p):
    """Vector field of the Hopf normal form in Cartesian coordinates.
    Input arguments
    x --- (x, y) coordinates of the current state
    p --- A tuple or list with the parameters mu, gamma and beta
    """

    fx = np.empty(x.shape, x.dtype)
    r2 = x[0]**2 + x[1]**2
    fx[0] = (p[0] - r2) * x[0] - (p[1] - p[2] * r2) * x[1]
    fx[1] = (p[1] - p[2] * r2) * x[0] + (p[0] - r2) * x[1]

    return fx

def JacobianCart(x, p):
    """Jacobian of the Hopf normal form at the fixed point.
    Input arguments
    x --- (x, y) coordinates of the current state
    p --- A tuple or list with the parameters mu, gamma and beta
    """

    r2 = x[0]**2 + x[1]**2
    J = np.array([[(p[0] - r2) - 2*x[0]**2 + 2*p[2]*x[0]*x[1],
                   -(p[1] - p[2]*r2) + 2*p[2]*x[1]**2 - 2*x[0]*x[1]],
                  [(p[1] - p[2]*r2) - 2*p[2]*x[0]**2 - 2*x[0]*x[1],
                   (p[0] - r2) - 2*x[1]**2 - 2*p[2]*x[0]*x[1]]])

    return J

# Phase space dimension
dim = 2
# Parameters (mu, gamma, beta)
p = np.array([1., 1., 0.1])
Rp = np.sqrt(p[0])
omega = p[1] - p[2] * Rp**2
Tp = 2*np.pi / omega

# Plot
fig = plt.figure(figsize=[8, 8])
ax = fig.add_subplot(111)
#ax.plot(X[:, 0], X[:, 1])
t = np.linspace(0., 2*np.pi, 1000)
Sx = Rp * np.cos(t)
Sy = Rp * np.sin(t)
plt.plot(Sx, Sy, '--k')
xlim = 2*np.array([-Rp, Rp])
ylim = xlim.copy()
ax.set_xlim(xlim)
ax.set_ylim(ylim)


# Time step
dt0 = 1.e-4
# Distance before to stop and maximum number of iterations
eps = Rp * 1.e-5
maxIter = 10
damp = 0.
#damp = 1.

# Initial state
pert = 1.5
x0 = np.array([Rp, 0.]) * pert
T0 = Tp * 1.1

# Plot
msize = 60

# niter = 20
xn = x0
Tn = T0
errDist, errDelta = 1.e27, 1e27

#for k in np.arange(niter):
nIter = 0
DY = np.zeros((dim+1, 1))

# Test distance between periodic points, size of Newton step
# and maximum number of iterations
while (errDist > eps) or (errDelta > eps) and (nIter < maxIter):
    # Update
    x0 += 2.**(-damp) * DY[:-1, 0]
    T0 += 2.**(-damp) * DY[-1, 0]
    
    # Integrate solution Euler forward
    # Adapt time step to period
    nt = np.int(np.ceil(T0 / dt0))
    dt = T0 / nt
    print '---Iteration ', nIter, '---'
    print 'x0 = ', x0
    print 'T0 = ', T0
    plt.scatter(x0[0], x0[1], s=msize, c='k', marker='+')
    X = np.empty((2, dim))
    X[0] = x0.copy()
    X[1] = X[0].copy()
    M = [np.empty((dim, dim)), np.eye(dim)]
    for t in np.arange(nt):
        # Step solution forward
        X[0] = X[1]
        X[1] = X[0] + dt * fieldCart(X[0], p)
        # Step fundamental forward
        M[0] = M[1]
        M[1] = M[0] + dt * np.dot(JacobianCart(X[0], p), M[0])
    xT = X[-1]
    MT = M[-1]
    errDist = np.sqrt(np.sum((xT - x0)**2))
    print 'xT = ', xT
    print 'd(xT, x0) = ', errDist
    
    plt.scatter(xT[0], xT[1], s=msize, c='r', marker='x')

    # Newton step
    N = np.zeros((dim+1, dim+1))
    N[:dim, :dim] = MT - np.eye(dim)
    N[-1, :-1] = fieldCart(x0, p)
    N[:-1, -1] = fieldCart(xT, p)
    B = np.zeros((dim+1, 1))
    B[:-1, 0] = x0 - xT
    DY = np.dot(np.linalg.inv(N), B)
    # Calculate step size
    errDelta = np.sqrt(np.sum(DY**2))
    print '|dy| = ', errDelta

    nIter += 1

# Get Floquet multipliers
(multipliers, eigVec) = np.linalg.eig(MT)
exponents = np.log(multipliers) / T0
print '-------------'
print '---Floquet---'
print 'Floquet multipliers = ', multipliers
print 'Floquet exponents = ', exponents
anaExponents = np.array([-2*p[0], 0.])
print 'Analytical Floquet exponents = ', anaExponents

print '-----------------'
print '---Convergence---'
if nIter == maxIter:
    print 'Did not converge!'
else:
    print 'Converged.'

    
